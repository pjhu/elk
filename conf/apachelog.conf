input {
  file { 
    path => ["/home/docker/logstash_logs/apachelogs/*/*.log"]
    sincedb_path => "/dev/null"
    start_position => "beginning"
    codec => multiline {
      patterns_dir => ["/home/docker/patterns"]
      pattern => "^%{IPORHOST}"
      negate => true
      what => previous
  }
  }
}

filter {
  grok {
    patterns_dir => ["/home/docker/logstash_patterns"]
    match => { "message" => "%{COMBINEDAPACHELOG}" } 
  }
  
  ruby {
    init => '
      def refererURIs event
        event["referrerWebSite"] = event["referrer"].split("?")[0].split("/")[2].chomp("\"")
      end
      
      def action event
        if (event["rawrequest"].include? "action")
          event["action"] = event["rawrequest"].split()[1].split("?")[1].split("&").select{ |p| p.include? "action"}[0].split("=")[1]
        end
      end
      
      def product event
        if event["message"].include? "productId"
          event["productId"] = event["message"].split().select{ |p| p.include? "productId="}[0].split("&").select{|q| q.include? "productId="}[0].split("=")[1].chomp("\"")
        end
      end

      def itemId event
        if event["message"].include? "itemId"
          event["itemId"] = event["message"].split().select{ |p| p.include? "itemId="}[0].split("&").select{|q| q.include? "itemId="}[0].split("=")[1].chomp("\"")
        end
      end

      def category event
        if (event["message"]).include? "categoryId"
          event["categoryId"] = event["message"].split().select{ |p| p.include? "categoryId="}[0].split("&").select{|q| q.include? "categoryId="}[0].split("=")[1].chomp("\"")
        end
      end

      def httpMethod event
        event["httpmethod"] = event["rawrequest"].split()[0]
      end

      def transaction event
        if event["rawrequest"].include? "JSESSIONID"
          event["transaction"] = event["rawrequest"].split()[1].split("?").select{|p| p.include? "JSESSIONID"}[0].split("&").select{|q| q.include? "JSESSIONID"}[0].split("=")[1]
        end
      end

    '
    code => '
      refererURIs(event)
      itemId(event)
      action(event) 
      product(event)
      category(event)
      httpMethod(event)
      transaction(event)
    '
  }
  
  date {
    match => ["timestamp",  "dd/MMM/yyyy:HH:mm:ss"]
    timezone => "Asia/Shanghai"
    target => "@timestamp"
  }

  if [action] == "addtocart" {
    mutate { add_tag => [ "taskStarted" ] }
  } else if [action] == "purchase" {
    mutate { add_tag => ["taskTerminated"] }
  }

  elapsed {
    start_tag => "taskStarted"
    end_tag => "taskTerminated"
    unique_id_field => "transaction"
    timeout => 1800
    new_event_on_match => false
  }

  geoip {
      source => "clientip"
      target => "geoip"
      database => "/home/docker/geo/GeoLiteCity.dat"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
  }
  mutate {
      convert => [ "[geoip][coordinates]", "float"]
  }
}

output {
  elasticsearch {
    hosts => ["192.168.99.100:9200"]
    index => "apachelog"
    document_type => "apachetype"
    template => "/home/docker/template/apchelog.json"
    template_name => "apache"
    template_overwrite => true
  }
  stdout { 
    codec => rubydebug { metadata => true }
  }
}
